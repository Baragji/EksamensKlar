# Comprehensive Microlearning App Development Plan

## Project Overview

**App Name:** ExamKlar  
**Purpose:** A microlearning app for exam preparation focusing on protein purification and microbiology  
**Technology Stack:** Flutter, Firebase, WebView for H5P content  
**Architecture:** Feature-first with Clean Architecture principles  

## Project Structure

```
examklar/
├── android/                 # Android-specific files
├── ios/                     # iOS-specific files
├── lib/
│   ├── core/                # Core functionality and utilities
│   │   ├── constants/       # App-wide constants
│   │   ├── errors/          # Error handling
│   │   ├── network/         # Network services
│   │   ├── theme/           # App theming
│   │   └── utils/           # Utility functions
│   ├── data/                # Data layer
│   │   ├── models/          # Data models
│   │   ├── repositories/    # Repository implementations
│   │   └── sources/         # Data sources (local and remote)
│   ├── domain/              # Domain layer
│   │   ├── entities/        # Business entities
│   │   ├── repositories/    # Repository interfaces
│   │   └── usecases/        # Business logic use cases
│   ├── features/            # App features
│   │   ├── auth/            # Authentication feature
│   │   ├── dashboard/       # Dashboard feature
│   │   ├── flashcards/      # Flashcards feature
│   │   ├── learning/        # Learning modules feature
│   │   ├── quiz/            # Quiz feature
│   │   └── settings/        # Settings feature
│   ├── presentation/        # Shared UI components
│   │   ├── widgets/         # Reusable widgets
│   │   └── pages/           # Common pages
│   ├── app.dart             # App entry point
│   └── main.dart            # Main function
├── assets/                  # Static assets
│   ├── images/              # Image assets
│   ├── fonts/               # Font assets
│   └── h5p/                 # H5P content (if stored locally)
├── test/                    # Test files
├── pubspec.yaml             # Dependencies
└── README.md                # Project documentation
```

## Atomic Development Plan

### Phase 1: Project Setup and Foundation

#### Sprint 1.1: Project Initialization (1 hour) ✅

1. Create Flutter project ✅
   ```bash
   flutter create examklar
   cd examklar
   ```

2. Set up Git repository ✅
   ```bash
   git init
   git add .
   git commit -m "Initial commit"
   ```

3. Configure basic project structure (create folders as per structure above) ✅

#### Sprint 1.2: Core Dependencies (30 minutes) ✅

1. Add essential dependencies to pubspec.yaml: ✅
   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     # State management
     provider: ^7.0.0
     # Firebase
     firebase_core: ^3.0.0
     firebase_auth: ^5.0.0
     cloud_firestore: ^5.0.0
     # Storage
     shared_preferences: ^3.0.0
     # UI components
     flutter_svg: ^2.0.5
     # WebView for H5P content
     webview_flutter: ^5.0.0
     # Animations
     lottie: ^3.0.0
     # Utilities
     intl: ^1.0.0
     url_launcher: ^7.0.0
   ```

2. Run `flutter pub get` ✅

#### Sprint 1.3: Firebase Setup (1 hour) ⏳

1. Create Firebase project in Firebase Console ⏳
2. Add Android and iOS apps to Firebase project ⏳
3. Download and add configuration files ⏳
   - google-services.json for Android
   - GoogleService-Info.plist for iOS
4. Initialize Firebase in main.dart: ✅ (Code added but commented out until configuration files are available)
   ```dart
   import 'package:firebase_core/firebase_core.dart';
   
   void main() async {
     WidgetsFlutterBinding.ensureInitialized();
     await Firebase.initializeApp();
     runApp(MyApp());
   }
   ```

#### Sprint 1.4: Theme Setup (30 minutes) ✅

1. Create theme constants in lib/core/theme/app_theme.dart ✅
2. Define color palette, text styles, and common dimensions ✅
3. Implement theme provider for light/dark mode support ✅

### Phase 2: Core Infrastructure

#### Sprint 2.1: Data Models (1 hour) ⏳

1. Create base models in lib/data/models/:
   - user_model.dart ⏳
   - topic_model.dart ⏳
   - session_model.dart ✅
   - flashcard_model.dart ⏳
   - quiz_model.dart ⏳
   - progress_model.dart ⏳

2. Example of session_model.dart:
   ```dart
   class SessionModel {
     final String id;
     final String topicId;
     final int day;
     final int sessionNumber;
     final DateTime lastReviewed;
     final DateTime nextReview;
     final int masteryLevel;
     final Map<String, dynamic> content;
     
     SessionModel({
       required this.id,
       required this.topicId,
       required this.day,
       required this.sessionNumber,
       required this.lastReviewed,
       required this.nextReview,
       required this.masteryLevel,
       required this.content,
     });
     
     factory SessionModel.fromJson(Map<String, dynamic> json) {
       return SessionModel(
         id: json['id'],
         topicId: json['topicId'],
         day: json['day'],
         sessionNumber: json['sessionNumber'],
         lastReviewed: (json['lastReviewed'] as Timestamp).toDate(),
         nextReview: (json['nextReview'] as Timestamp).toDate(),
         masteryLevel: json['masteryLevel'],
         content: json['content'],
       );
     }
     
     Map<String, dynamic> toJson() {
       return {
         'id': id,
         'topicId': topicId,
         'day': day,
         'sessionNumber': sessionNumber,
         'lastReviewed': Timestamp.fromDate(lastReviewed),
         'nextReview': Timestamp.fromDate(nextReview),
         'masteryLevel': masteryLevel,
         'content': content,
       };
     }
   }
   ```

#### Sprint 2.2: Repository Interfaces (30 minutes) ⏳

1. Create repository interfaces in lib/domain/repositories/:
   - user_repository.dart ⏳
   - topic_repository.dart ⏳
   - session_repository.dart ✅
   - flashcard_repository.dart ⏳
   - quiz_repository.dart ⏳
   - progress_repository.dart ⏳

2. Example of session_repository.dart:
   ```dart
   abstract class SessionRepository {
     Future<List<Session>> getSessions(String topicId);
     Future<Session> getSession(String sessionId);
     Future<void> updateSessionProgress(String sessionId, int masteryLevel);
     Future<List<Session>> getDueSessionsForToday();
     Future<void> scheduleNextReview(String sessionId);
   }
   ```

#### Sprint 2.3: Repository Implementations (1 hour) ⏳

1. Create repository implementations in lib/data/repositories/:
   - firebase_user_repository.dart ⏳
   - firebase_topic_repository.dart ⏳
   - firebase_session_repository.dart ✅
   - firebase_flashcard_repository.dart ⏳
   - firebase_quiz_repository.dart ⏳
   - firebase_progress_repository.dart ⏳

2. Example of firebase_session_repository.dart:
   ```dart
   class FirebaseSessionRepository implements SessionRepository {
     final FirebaseFirestore _firestore = FirebaseFirestore.instance;
     
     @override
     Future<List<Session>> getSessions(String topicId) async {
       final snapshot = await _firestore
           .collection('sessions')
           .where('topicId', isEqualTo: topicId)
           .orderBy('day')
           .orderBy('sessionNumber')
           .get();
       
       return snapshot.docs
           .map((doc) => SessionModel.fromJson(doc.data()).toEntity())
           .toList();
     }
     
     @override
     Future<Session> getSession(String sessionId) async {
       final doc = await _firestore.collection('sessions').doc(sessionId).get();
       return SessionModel.fromJson(doc.data()!).toEntity();
     }
     
     // Implement other methods...
   }
   ```

#### Sprint 2.4: Use Cases (1 hour) ⏳

1. Create use cases in lib/domain/usecases/:
   - get_sessions_usecase.dart ⏳
   - get_session_usecase.dart ⏳
   - update_session_progress_usecase.dart ⏳
   - get_due_sessions_usecase.dart ✅
   - schedule_next_review_usecase.dart ⏳
   - etc. ⏳

2. Example of get_due_sessions_usecase.dart:
   ```dart
   class GetDueSessionsUseCase {
     final SessionRepository repository;
     
     GetDueSessionsUseCase(this.repository);
     
     Future<List<Session>> execute() {
       return repository.getDueSessionsForToday();
     }
   }
   ```

### Phase 3: Authentication Feature

#### Sprint 3.1: Authentication UI (1 hour)

1. Create authentication screens in lib/features/auth/presentation/pages/:
   - login_page.dart
   - register_page.dart
   - forgot_password_page.dart

2. Create shared authentication widgets in lib/features/auth/presentation/widgets/:
   - auth_button.dart
   - auth_text_field.dart
   - social_auth_button.dart

#### Sprint 3.2: Authentication Logic (1 hour)

1. Create authentication provider in lib/features/auth/presentation/providers/auth_provider.dart
2. Implement login, register, and password reset functionality
3. Add error handling and loading states

#### Sprint 3.3: User Profile (1 hour)

1. Create user profile screen in lib/features/auth/presentation/pages/profile_page.dart
2. Implement profile editing functionality
3. Add profile picture upload option
### Phase 4: Dashboard Feature

#### Sprint 4.1: Dashboard UI (1 hour) ✅

1. Create dashboard screen in lib/features/dashboard/presentation/pages/dashboard_page.dart ✅
2. Implement today's sessions section ✅
3. Add progress overview section ✅
4. Create quick access to last session ✅

#### Sprint 4.2: Dashboard Logic (1 hour) ✅

1. Create dashboard provider in lib/features/dashboard/presentation/providers/dashboard_provider.dart ✅
2. Implement data fetching for due sessions ✅
3. Add progress calculation logic ✅

### Phase 5: Learning Modules Feature

#### Sprint 5.1: Learning Module List (1 hour)

1. Create learning modules list screen in lib/features/learning/presentation/pages/modules_list_page.dart
2. Implement module card widget
3. Add filtering and sorting options

#### Sprint 5.2: Learning Session UI (1 hour)

1. Create learning session screen in lib/features/learning/presentation/pages/session_page.dart
2. Implement the 4-5 minute session template:
   - Key concepts section
   - Practical example section
   - Self-test section
   - Error-focused repetition section
#### Sprint 5.3: WebView for H5P Content (1 hour)

1. Create H5P content viewer in lib/features/learning/presentation/widgets/h5p_content_viewer.dart
2. Implement WebView to display H5P content
3. Add JavaScript communication for tracking progress

#### Sprint 5.4: Learning Session Logic (1 hour)

1. Create learning session provider in lib/features/learning/presentation/providers/session_provider.dart
2. Implement session progress tracking
3. Add spaced repetition scheduling using the "2357" method

### Phase 6: Flashcards Feature

#### Sprint 6.1: Flashcard UI (1 hour)

1. Create flashcard screen in lib/features/flashcards/presentation/pages/flashcard_page.dart
2. Implement flashcard widget with flip animation
3. Add swipe gestures for difficulty rating

#### Sprint 6.2: Flashcard Logic (1 hour)

1. Create flashcard provider in lib/features/flashcards/presentation/providers/flashcard_provider.dart
2. Implement spaced repetition algorithm
3. Add progress tracking for flashcards

### Phase 7: Quiz Feature

#### Sprint 7.1: Quiz UI (1 hour)

1. Create quiz screen in lib/features/quiz/presentation/pages/quiz_page.dart
2. Implement question types:
   - Multiple choice
   - True/False
   - Fill in the blank
   - Matching
#### Sprint 7.2: Quiz Logic (1 hour)

1. Create quiz provider in lib/features/quiz/presentation/providers/quiz_provider.dart
2. Implement scoring system
3. Add feedback for correct/incorrect answers
4. Implement quiz results summary

### Phase 8: Settings Feature

#### Sprint 8.1: Settings UI (30 minutes)

1. Create settings screen in lib/features/settings/presentation/pages/settings_page.dart
2. Implement settings options:
   - Notification preferences
   - Study schedule
   - Display options (theme, font size)
   - Data usage options

#### Sprint 8.2: Settings Logic (30 minutes)

1. Create settings provider in lib/features/settings/presentation/providers/settings_provider.dart
2. Implement settings persistence using SharedPreferences
3. Add notification scheduling

### Phase 9: Progress Analytics Feature

#### Sprint 9.1: Progress UI (1 hour)

1. Create progress analytics screen in lib/features/progress/presentation/pages/progress_page.dart
2. Implement charts and graphs for:
   - Mastery by topic
   - Study time tracking
   - Spaced repetition calendar
#### Sprint 9.2: Progress Logic (1 hour)

1. Create progress provider in lib/features/progress/presentation/providers/progress_provider.dart
2. Implement data aggregation for analytics
3. Add export functionality for progress data

### Phase 10: Content Creation and Integration

#### Sprint 10.1: Sample Content Creation (2 hours)

1. Create sample content for protein purification:
   - Day 1: Protein Biochemistry Basics
   - Day 2: Cell Lysis and Extraction
   - Day 3: Chromatography - Part 1
   - Day 4: Chromatography - Part 2
   - Day 5: Characterization and Validation
   - Day 6: Microbiology Integration
   - Day 7: Troubleshooting and Integration

2. Format content according to the 4-5 minute session template:
   - 1 min: Key concepts (text/infographic)
   - 2 min: Practical example/case study
   - 1 min: Self-test (3-5 questions)
   - 1 min: Error-focused repetition

#### Sprint 10.2: Firebase Data Population (1 hour)

1. Create Firebase data population script
2. Upload sample content to Firestore
3. Verify data structure and relationships
### Phase 11: Testing and Refinement

#### Sprint 11.1: Unit Testing (1 hour)

1. Write unit tests for core functionality
2. Test repository implementations
3. Test use cases

#### Sprint 11.2: Integration Testing (1 hour)

1. Write integration tests for feature interactions
2. Test Firebase integration
3. Test WebView and H5P content loading

#### Sprint 11.3: UI Testing (1 hour)

1. Write UI tests for critical user flows
2. Test responsive design
3. Test accessibility features

#### Sprint 11.4: Performance Optimization (1 hour)

1. Analyze app performance
2. Optimize Firebase queries
3. Implement caching strategies
4. Reduce unnecessary rebuilds

### Phase 12: Deployment

#### Sprint 12.1: Pre-release Checklist (30 minutes)

1. Verify all features are working
2. Check for any Firebase security issues
3. Ensure proper error handling throughout the app
4. Verify analytics implementation

#### Sprint 12.2: Build and Deploy (30 minutes)

1. Generate release builds for Android and iOS
2. Deploy to personal devices for testing
3. Prepare for app store submission if desired

## Implementation Details for Key Components

### 1. Spaced Repetition Implementation (2357 Method)

```dart
class SpacedRepetitionScheduler {
  static DateTime scheduleNextReview(int currentMasteryLevel) {
    final now = DateTime.now();
    
    switch (currentMasteryLevel) {
      case 0: // New or incorrect
        return now.add(Duration(days: 1)); // Review tomorrow
      case 1: // Difficult
        return now.add(Duration(days: 2)); // Review in 2 days
      case 2: // Good
        return now.add(Duration(days: 3)); // Review in 3 days
      case 3: // Easy
        return now.add(Duration(days: 5)); // Review in 5 days
      case 4: // Very Easy
        return now.add(Duration(days: 7)); // Review in 7 days
      default:
        return now.add(Duration(days: 1)); // Default to tomorrow
    }
  }
}
```
### 2. H5P Content Viewer Implementation

```dart
import 'package:flutter/material.dart';
import 'package:webview_flutter/webview_flutter.dart';

class H5PContentViewer extends StatefulWidget {
  final String contentUrl;
  final Function(int) onProgressUpdate;
  
  const H5PContentViewer({
    Key? key,
    required this.contentUrl,
    required this.onProgressUpdate,
  }) : super(key: key);
  
  @override
  _H5PContentViewerState createState() => _H5PContentViewerState();
}

class _H5PContentViewerState extends State<H5PContentViewer> {
  late WebViewController _controller;
  
  @override
  void initState() {
    super.initState();
    _controller = WebViewController()
      ..setJavaScriptMode(JavaScriptMode.unrestricted)
      ..setNavigationDelegate(
        NavigationDelegate(
          onPageFinished: (String url) {
            _setupH5PMessageListener();
          },
        ),
      )
      ..loadRequest(Uri.parse(widget.contentUrl));
  }
  
  void _setupH5PMessageListener() {
    _controller.runJavaScript('''
      window.addEventListener('message', function(event) {
        if (event.data && event.data.type === 'h5p') {
          window.flutter_inappwebview.callHandler('h5pProgress', event.data);
        }
      });
    ''');
    
    // Add JavaScript handler
    _controller.addJavaScriptChannel(
      'h5pProgress',
      onMessageReceived: (JavaScriptMessage message) {
        final data = jsonDecode(message.message);
        if (data['progress'] != null) {
          widget.onProgressUpdate(data['progress']);
        }
      },
    );
  }
  
  @override
  Widget build(BuildContext context) {
    return WebViewWidget(controller: _controller);
  }
}
```
### 3. Firestore Data Structure Example

```dart
// Example Firestore document structure for a learning session

{
  "id": "session_1_1",
  "topicId": "protein_purification",
  "day": 1,
  "sessionNumber": 1,
  "lastReviewed": Timestamp.fromDate(DateTime.now()),
  "nextReview": Timestamp.fromDate(DateTime.now().add(Duration(days: 1))),
  "masteryLevel": 0,
  "content": {
    "keyConcepts": {
      "title": "Protein Purification Basics",
      "text": "Protein purification is the process of isolating proteins from a complex mixture...",
      "mediaUrl": "https://firebasestorage.googleapis.com/...",
      "h5pUrl": "https://h5p.org/node/12345"
    },
    "practicalExample": {
      "title": "Laboratory Protein Extraction",
      "text": "In a typical laboratory setting, we would start with a bacterial culture...",
      "mediaUrl": "https://firebasestorage.googleapis.com/...",
      "steps": [
        "Grow bacterial culture to desired density",
        "Harvest cells by centrifugation",
        "Resuspend in lysis buffer",
        "Disrupt cells using sonication or mechanical methods",
        "Clarify lysate by centrifugation"
      ]
    },
    "quiz": [
      {
        "question": "Which chromatography method separates proteins based on size?",
        "type": "multiple_choice",
        "options": ["IEX", "SEC", "HIC", "Affinity"],
        "correctIndex": 1,
        "explanation": "Size Exclusion Chromatography (SEC) separates molecules by size"
      },
      {
        "question": "Protease inhibitors are added during cell lysis to prevent protein degradation.",
        "type": "true_false",
        "correct": true,
        "explanation": "Proteases released during cell lysis can degrade your protein of interest"
      },
      {
        "question": "The first step in protein purification from bacterial cells is usually ______.",
        "type": "fill_blank",
        "answer": "cell lysis",
        "alternatives": ["cell disruption", "breaking cells"],
        "explanation": "Breaking open the cells to release internal contents"
      }
    ],
    "errorFocus": {
      "commonMistake": "Forgetting to add protease inhibitors during cell lysis",
      "correction": "Always add protease inhibitors to prevent protein degradation",
      "tips": [
        "Prepare protease inhibitor cocktail fresh",
        "Add inhibitors immediately before lysis",
        "Keep samples cold to reduce protease activity"
      ]
    }
  }
}
```
### 4. Session Template Implementation

```dart
import 'package:flutter/material.dart';

class SessionTemplate extends StatefulWidget {
  final Map<String, dynamic> sessionContent;
  final Function(int) onComplete;
  
  const SessionTemplate({
    Key? key,
    required this.sessionContent,
    required this.onComplete,
  }) : super(key: key);
  
  @override
  _SessionTemplateState createState() => _SessionTemplateState();
}

class _SessionTemplateState extends State<SessionTemplate> {
  int _currentStep = 0;
  final int _totalSteps = 4;
  
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Progress indicator
        LinearProgressIndicator(
          value: (_currentStep + 1) / _totalSteps,
        ),
        
        // Step content
        Expanded(
          child: _buildCurrentStep(),
        ),
        
        // Navigation buttons
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            if (_currentStep > 0)
              ElevatedButton(
                onPressed: _previousStep,
                child: Text('Previous'),
              )
            else
              SizedBox(width: 80),
              
            Text('${_currentStep + 1} / $_totalSteps'),
            
            ElevatedButton(
              onPressed: _currentStep < _totalSteps - 1 ? _nextStep : _completeSession,
              child: Text(_currentStep < _totalSteps - 1 ? 'Next' : 'Complete'),
            ),
          ],
        ),
      ],
    );
  }
  
  Widget _buildCurrentStep() {
    switch (_currentStep) {
      case 0:
        return _buildKeyConceptsStep();
      case 1:
        return _buildPracticalExampleStep();
      case 2:
        return _buildQuizStep();
      case 3:
        return _buildErrorFocusStep();
      default:
        return Container();
    }
  }
  
  Widget _buildKeyConceptsStep() {
    final keyConcepts = widget.sessionContent['keyConcepts'];
    
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              keyConcepts['title'],
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            SizedBox(height: 16),
            if (keyConcepts['mediaUrl'] != null)
              Image.network(
                keyConcepts['mediaUrl'],
                height: 200,
                width: double.infinity,
                fit: BoxFit.cover,
              ),
            SizedBox(height: 16),
            Text(keyConcepts['text']),
            if (keyConcepts['h5pUrl'] != null)
              ElevatedButton(
                onPressed: () {
                  // Open H5P content in a dialog or new screen
                },
                child: Text('View Interactive Content'),
              ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildPracticalExampleStep() {
    final example = widget.sessionContent['practicalExample'];
    
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              example['title'],
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            SizedBox(height: 16),
            if (example['mediaUrl'] != null)
              Image.network(
                example['mediaUrl'],
                height: 200,
                width: double.infinity,
                fit: BoxFit.cover,
              ),
            SizedBox(height: 16),
            Text(example['text']),
            SizedBox(height: 16),
            if (example['steps'] != null) ...[
              Text(
                'Steps:',
                style: Theme.of(context).textTheme.titleMedium,
              ),
              SizedBox(height: 8),
              ...List.generate(
                example['steps'].length,
                (index) => Padding(
                  padding: const EdgeInsets.only(bottom: 8.0),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('${index + 1}. '),
                      Expanded(child: Text(example['steps'][index])),
                    ],
                  ),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
  
  Widget _buildQuizStep() {
    final quizQuestions = widget.sessionContent['quiz'];
    
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Self-Test',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            SizedBox(height: 16),
            ...List.generate(
              quizQuestions.length,
              (index) => _buildQuizQuestion(quizQuestions[index], index),
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildQuizQuestion(Map<String, dynamic> question, int index) {
    // Implementation depends on question type
    // This is a simplified example
    return Card(
      margin: EdgeInsets.only(bottom: 16),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Question ${index + 1}: ${question['question']}',
              style: Theme.of(context).textTheme.titleMedium,
            ),
            SizedBox(height: 16),
            if (question['type'] == 'multiple_choice')
              Column(
                children: List.generate(
                  question['options'].length,
                  (optionIndex) => RadioListTile(
                    title: Text(question['options'][optionIndex]),
                    value: optionIndex,
                    groupValue: null, // Would be managed by state
                    onChanged: (value) {
                      // Handle selection
                    },
                  ),
                ),
              )
            else if (question['type'] == 'true_false')
              Row(
                children: [
                  ElevatedButton(
                    onPressed: () {
                      // Handle True selection
                    },
                    child: Text('True'),
                  ),
                  SizedBox(width: 16),
                  ElevatedButton(
                    onPressed: () {
                      // Handle False selection
                    },
                    child: Text('False'),
                  ),
                ],
              )
            else if (question['type'] == 'fill_blank')
              TextField(
                decoration: InputDecoration(
                  hintText: 'Enter your answer',
                  border: OutlineInputBorder(),
                ),
                onChanged: (value) {
                  // Handle text input
                },
              ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildErrorFocusStep() {
    final errorFocus = widget.sessionContent['errorFocus'];
    
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Common Mistakes to Avoid',
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            SizedBox(height: 16),
            Card(
              color: Colors.red.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Common Mistake:',
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                    SizedBox(height: 8),
                    Text(errorFocus['commonMistake']),
                  ],
                ),
              ),
            ),
            SizedBox(height: 16),
            Card(
              color: Colors.green.shade50,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Correction:',
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                    SizedBox(height: 8),
                    Text(errorFocus['correction']),
                  ],
                ),
              ),
            ),
            if (errorFocus['tips'] != null) ...[
              SizedBox(height: 16),
              Text(
                'Tips:',
                style: Theme.of(context).textTheme.titleMedium,
              ),
              SizedBox(height: 8),
              ...List.generate(
                errorFocus['tips'].length,
                (index) => Padding(
                  padding: const EdgeInsets.only(bottom: 8.0),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Icon(Icons.lightbulb_outline, size: 20),
                      SizedBox(width: 8),
                      Expanded(child: Text(errorFocus['tips'][index])),
                    ],
                  ),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }
  
  void _nextStep() {
    if (_currentStep < _totalSteps - 1) {
      setState(() {
        _currentStep++;
      });
    }
  }
  
  void _previousStep() {
    if (_currentStep > 0) {
      setState(() {
        _currentStep--;
      });
    }
  }
  
  void _completeSession() {
    // Calculate mastery level based on quiz performance
    // This is a simplified example
    final int masteryLevel = 2; // Medium difficulty
    widget.onComplete(masteryLevel);
  }
}
Handling AI Context Limitations
To address the AI context window limitation of 50k tokens and ensure the development process can continue smoothly even if an AI session is interrupted:

Self-Contained Sprints: Each sprint is designed to be completely self-contained and can be executed independently.

Detailed Documentation: Each file has clear comments explaining its purpose and relationship to other components.

Consistent Naming Conventions: All files follow consistent naming patterns to make it easy to understand the codebase structure.

Checkpoint System: After each sprint, create a Git commit with a descriptive message to mark progress.

Sprint Resumption Instructions: Each sprint begins with clear instructions on how to verify the previous sprint's completion.

Modular Architecture: The feature-first architecture allows working on one feature at a time without affecting others.

Dependency Documentation: Each file clearly documents its dependencies at the top.

State Recovery: If an AI session is interrupted, you can provide the current state of the project (e.g., which sprints have been completed) to resume work.

Conclusion
This comprehensive plan provides a detailed roadmap for building the ExamKlar microlearning app using Flutter and Firebase. The atomic sprint structure ensures that development can proceed smoothly even with AI context limitations, as each sprint is self-contained and builds incrementally on previous work.

The app will implement evidence-based learning techniques including active recall, spaced repetition with the 2357 method, and the Pomodoro technique, all while providing specialized content for microbiology and protein purification.

By following this plan, you'll be able to create a high-quality, effective learning experience with minimal custom coding by leveraging existing open-source tools and frameworks.

Would you like to begin implementation with the first sprint, or would you like me to provide more details on any specific aspect of the plan?



